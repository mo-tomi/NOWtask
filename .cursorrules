# NowTask プロジェクト - Cursor AI ルール（v2.0）

## プロジェクト概要
NowTaskは1日の予定を1本の縦タイムラインで可視化するパーソナルタスクマネージャーです。
モダンなES Modules、Testing Trophy、クリーンアーキテクチャを採用した高度なWebアプリケーションです。

## 現在の開発段階
### 段階3（現在）: 高度機能実装済み
- ✅ ES Modules による完全モジュラー設計
- ✅ Vite + Vitest + ESLint 開発環境
- ✅ ドラッグ&ドロップ、リサイズ機能
- ✅ localStorage による永続化
- ✅ レーン分けアルゴリズム（O(n log n)）
- ✅ 仮想スクロール・無限スクロール
- ✅ Testing Trophy対応テストコード
- ✅ Web Worker による非同期処理
- ✅ PWA対応、レスポンシブデザイン

### 段階4（継続中）: UX強化・最適化
- 🔄 パフォーマンス最適化
- 🔄 アクセシビリティ向上
- 🔄 マイクロインタラクション
- 🔄 AI支援機能
- 🔄 コンテキスト適応UI

## 技術スタック

### コア技術
- **JavaScript**: ES2021+ (ES Modules)
- **Build Tool**: Vite（rolldown-vite）
- **Package Manager**: pnpm 
- **Testing**: Vitest + Testing Trophy
- **Linting**: ESLint v9+
- **CSS**: SCSS + PostCSS

### アーキテクチャ
- **パターン**: Clean Architecture + Testing Trophy
- **モジュール分割**: core/ services/ ui/ worker/
- **状態管理**: 中央集権的window.AppState + 分散ストア
- **非同期処理**: Web Workers + Promise-based
- **型安全性**: JSDoc + TypeScript型チェック

## ファイル構成
```
NOWtask/
├── index.html              # メインHTML
├── main.js                 # エントリポイント（ES Module）
├── style.css              # コンパイル済みCSS
├── package.json           # 依存関係管理
├── vite.config.js         # Vite設定
├── eslint.config.js       # ESLint設定
├── pnpm-workspace.yaml    # pnpm設定
├── core/                  # コアロジック
│   ├── laneEngine.js      # レーン分けアルゴリズム
│   └── timeUtils.js       # 時間計算ユーティリティ
├── services/              # ビジネスロジック
│   └── storage.js         # データ永続化
├── ui/                    # UI コンポーネント
│   ├── taskCard.js        # タスクカード管理
│   └── virtualScroll.js   # 仮想スクロール
├── worker/                # Web Workers
│   └── laneWorker.js      # バックグラウンド計算
├── src/styles/            # SCSS ソース
│   ├── _variables.scss    # 変数定義
│   └── _mixins.scss       # ミックスイン
├── test/                  # テストファイル
└── tests/                 # E2Eテスト
```

## コーディング規約

### JavaScript（ES Modules）
- **標準**: ECMAScript 2021+
- **インデント**: スペース2文字
- **モジュール**: 必ずnamed exportを使用
- **JSDoc**: 全関数に必須（型情報含む）
- **エラーハンドリング**: try-catch + console.error
- **非同期**: async/await優先、Promise.allで並列処理

### CSS/SCSS
- **プリプロセッサ**: SCSS使用
- **設計**: BEM + Component-based
- **変数**: CSS Custom Properties + SCSS変数併用
- **レスポンシブ**: Mobile-first approach
- **パフォーマンス**: Critical CSS最適化

### HTML
- **セマンティック**: WAI-ARIA準拠
- **アクセシビリティ**: WCAG 2.1 AA レベル
- **SEO**: 構造化データ + meta情報
- **パフォーマンス**: preload/prefetch最適化

## デザインシステム v2.0

### カラーパレット（拡張版）
```scss
:root {
  // Primary Colors
  --primary: #2E8BFF;
  --primary-light: #5BA3FF;
  --primary-dark: #1C5FB8;
  
  // Semantic Colors
  --success: #10B981;
  --warning: #F59E0B;
  --danger: #EF4444;
  --info: #3B82F6;
  
  // Task Colors
  --task-normal: #F8FAFC;
  --task-high: #FEF3C7;
  --task-urgent: #FEE2E2;
  --task-completed: #ECFDF5;
  
  // Surface Colors
  --surface-1: #FFFFFF;
  --surface-2: #F8FAFC;
  --surface-3: #F1F5F9;
  
  // Text Colors
  --text-primary: #0F172A;
  --text-secondary: #475569;
  --text-tertiary: #94A3B8;
}
```

### タイポグラフィ
- **フォント**: Inter Variable（可変フォント）
- **サイズスケール**: Modular Scale（1.25比率）
- **ウェイト**: 400/500/600/700
- **行間**: 1.5（本文）/ 1.2（見出し）

### スペーシング
- **ベース**: 4px単位（0.25rem）
- **スケール**: 4, 8, 12, 16, 20, 24, 32, 40, 48, 64px
- **レイアウト**: 8px グリッドシステム

## パフォーマンス仕様

### Core Web Vitals
- **LCP**: < 2.5秒（最大コンテンツ描画）
- **FID**: < 100ms（初回入力遅延）
- **CLS**: < 0.1（累積レイアウト変更）

### カスタム指標
- **初期表示**: < 1秒
- **レーン計算**: < 50ms（1000タスク）
- **スクロール**: 60fps維持
- **メモリ使用量**: < 50MB

## テスト戦略（Testing Trophy）

### 1. Static Analysis（静的解析）
```bash
pnpm lint:check          # ESLint
pnpm type:check          # TypeScript
```

### 2. Unit Tests（単体テスト）
```bash
pnpm test:unit           # 純粋関数テスト
```

### 3. Integration Tests（統合テスト）
```bash
pnpm test:integration    # モジュール間テスト
```

### 4. E2E Tests（E2Eテスト）
```bash
pnpm test:e2e           # ユーザーフローテスト
```

## 開発ワークフロー

### 日常開発
```bash
pnpm dev                 # 開発サーバー起動
pnpm test               # テスト実行（watch mode）
pnpm lint               # コード整形
```

### ビルド・デプロイ
```bash
pnpm build              # プロダクションビルド
pnpm preview            # ビルド確認
pnpm test:run           # 全テスト実行
```

## アーキテクチャガイドライン

### モジュール設計
1. **core/**: ビジネスロジック（純粋関数）
2. **services/**: 外部API・ストレージ
3. **ui/**: UIコンポーネント・DOM操作
4. **worker/**: バックグラウンド処理

### 依存関係ルール
- core → 他モジュールに依存しない
- services → core のみ依存可能
- ui → core, services に依存可能
- main.js → 全モジュールをオーケストレーション

### 状態管理
- **グローバル状態**: window.AppState（最小限）
- **ローカル状態**: 各コンポーネント内
- **永続化**: services/storage.js経由のみ

## パフォーマンス最適化

### メモリ管理
- WeakMap/WeakSet使用
- イベントリスナー適切な削除
- 定期的なガベージコレクション

### レンダリング最適化
- requestAnimationFrame使用
- Virtual Scrolling
- CSS contain プロパティ
- will-change 適切な使用

### ネットワーク最適化
- Service Worker
- Critical CSS inlining
- Resource Hints（preload/prefetch）

## アクセシビリティ

### 必須対応
- **キーボード操作**: Tab/Enter/Escape/Arrow keys
- **スクリーンリーダー**: ARIA + role属性
- **色覚**: コントラスト比4.5:1以上
- **運動機能**: 44px以上のタッチターゲット

### 実装パターン
```javascript
// Focus管理
element.setAttribute('tabindex', '0');
element.setAttribute('aria-label', '説明テキスト');

// ライブリージョン
announceToScreenReader('変更内容', 'polite');
```

## セキュリティ

### XSS対策
- innerHTMLの使用禁止
- DOMPurify使用（必要時のみ）
- Content Security Policy

### データ保護
- localStorage暗号化
- 機密データの適切な削除
- セッション管理

## デバッグ・監視

### 開発時
```javascript
// デバッグフラグ
?debug=true              # 詳細ログ出力
?performance=true        # パフォーマンス計測
?test=true              # テストモード
```

### 本番環境
- エラートラッキング
- パフォーマンス監視
- ユーザー行動分析

## 将来拡張計画

### Phase 4: AI支援
- タスク自動分類
- 予測スケジューリング
- 集中時間分析

### Phase 5: チーム機能
- リアルタイム同期
- 共有カレンダー
- コラボレーション

## ブラウザサポート
- **Chrome**: 最新2バージョン（完全サポート）
- **Firefox**: 最新2バージョン（完全サポート）  
- **Safari**: 最新2バージョン（完全サポート）
- **Edge**: 最新2バージョン（完全サポート）

## 禁止事項・非推奨

### 技術的制約
- ❌ jQuery等の重いライブラリ
- ❌ document.write()
- ❌ eval() / Function()
- ❌ インラインスタイル（緊急時以外）
- ❌ グローバル変数の濫用

### 機能制約（意図的な制限）
- **複雑なテーマシステム**: シンプルさ維持
- **過度なアニメーション**: パフォーマンス優先  
- **不要な通知**: 集中妨害の回避
- **プラグインシステム**: コア機能の安定性優先
- **キーボードショートカット**: 直感性・シンプルさ維持のため全面禁止
- **ダークモード**: 統一された美しいライトテーマに特化、複雑性排除のため全面禁止

## エラーハンドリング

### 階層的エラー処理
```javascript
try {
  // 危険な処理
} catch (error) {
  console.error('モジュール名:エラー詳細', error);
  showUserFriendlyMessage('操作を完了できませんでした');
  reportToAnalytics(error);
}
```

### ユーザー体験
- 非破壊的フォールバック
- 明確なエラーメッセージ
- 復旧操作の提示

## 国際化（将来対応）
- 文字列外部化準備
- 日付・時刻フォーマット
- RTL言語対応設計

この更新されたルールに従って、高品質で保守性の高いコードを継続的に開発してください。 